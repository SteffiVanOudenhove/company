{
	"info": {
		"_postman_id": "e8b3b37c-13ab-4eb9-9070-466bd8552699",
		"name": "BigCo Company API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Company Home",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa707d9f-93f6-437a-8715-45e6dec84ea3",
						"exec": [
							"/***********************",
							" * FORMS+JSON TESTS",
							" ***********************/",
							"",
							"// shared vars for this script ",
							"var body = pm.response.json();",
							"var obj = 'home';",
							"var utils = shared();",
							"",
							"// 200 OK",
							"utils.checkStatus(200);",
							"",
							"// HEADERS",
							"utils.checkHeader({name:'content-type',value:'application/forms+json'});",
							"",
							"// METADATA",
							"utils.checkMeta({name:'title', value:'BigCo Company Records'});",
							"utils.checkMeta({name:'release', value:'1.0.0'});",
							"utils.checkMeta({name:'author', value:'Amundsen'});",
							"",
							"// LINKS",
							"utils.checkLink('home');",
							"utils.checkLink('self');",
							"utils.checkLink('list');",
							"",
							"// ITEMS",
							"/* none for this request */",
							"",
							"",
							"// SHARED FUNCTIONS",
							"function shared () {",
							"",
							"    // check status",
							"    var checkStatus = function(value) {",
							"        pm.test('Status is '+ value, function() {",
							"           pm.expect(pm.response.code).to.equal(value); ",
							"        });",
							"    };",
							"",
							"    // check header",
							"    var checkHeader = function(args) {",
							"        pm.test('Header ' + args.name + ' contains ' + args.value, function() {",
							"            var hdr = pm.response.headers.get(args.name);",
							"            pm.expect(hdr.indexOf(args.value)).to.not.equal(-1);",
							"        });",
							"    };",
							"",
							"    // metadata testing",
							"    var checkMeta = function(args) {",
							"        pm.test(args.name + ' contains '+ args.value, function() {",
							"           var meta = body[obj].metadata.find( x => x.name === args.name);",
							"           pm.expect(meta.value.indexOf(args.value)).to.not.equal(-1);",
							"        });",
							"    };",
							"",
							"    // link testing",
							"    var checkLink = function(id) {",
							"        pm.test('Valid '+id+' link', function() {",
							"            var body = pm.response.json();",
							"            var link = body[obj].links.find(x => x.id === id);",
							"            pm.expect(link.id).to.equal(id);",
							"            pm.expect(link.href).to.be.a('string');",
							"        });",
							"    };",
							"",
							"    return {",
							"        checkStatus,",
							"        checkHeader,",
							"        checkMeta,",
							"        checkLink",
							"    };",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0bf85a62-3593-4514-bab9-ca0015971f4e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/forms+json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{server}}/",
					"host": [
						"{{server}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Company List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa707d9f-93f6-437a-8715-45e6dec84ea3",
						"exec": [
							"/***********************",
							" * FORMS+JSON TESTS",
							" ***********************/",
							"",
							"// shared vars for this script ",
							"var body = pm.response.json();",
							"var utils = shared({object:'company'});",
							"",
							"// 200 OK",
							"utils.checkStatus(200);",
							"",
							"// HEADERS",
							"utils.checkHeader({name:'content-type',value:'application/forms+json'});",
							"",
							"// METADATA",
							"utils.checkMeta({name:'title', value:'BigCo Company Records'});",
							"utils.checkMeta({name:'release', value:'1.0.0'});",
							"utils.checkMeta({name:'author', value:'Amundsen'});",
							"",
							"// LINKS",
							"utils.checkPageLink({name:'home', has:['id','href','rel']});",
							"utils.checkPageLink({name:'self', has:['id','href','rel']});",
							"utils.checkPageLink({name:'list', has:['id','href','rel']});",
							"utils.checkPageLink({name:'filter', has:['id','href','rel']});",
							"utils.checkPageLink({name:'create', has:['id','href','rel','method','properties']});",
							"",
							"// ITEMS",
							"utils.checkItem({has:['id','companyName','status','email','dateCreated','dateUpdated','links']});",
							"utils.checkItemLink({name:'read', has:['id','href','rel']});",
							"utils.checkItemLink({name:'update', has:['id','href','rel','method','properties']});",
							"utils.checkItemLink({name:'status', has:['id','href','rel','method','properties']});",
							"utils.checkItemLink({name:'remove', has:['id','href','rel','method','properties']});",
							"",
							"// SHARED FUNCTIONS",
							"function shared (args) {",
							"",
							"    var obj = args.object||'';",
							"    ",
							"    // check status",
							"    var checkStatus = function(value) {",
							"        pm.test('Status is ' + value, function() {",
							"           pm.expect(pm.response.code).to.equal(value); ",
							"        });",
							"    };",
							"",
							"    // check header",
							"    var checkHeader = function(args) {",
							"        pm.test('Header ' + args.name + ' contains ' + args.value, function() {",
							"            var hdr = pm.response.headers.get(args.name);",
							"            pm.expect(hdr).to.include(args.value);",
							"        });",
							"    };",
							"",
							"    // check metadata",
							"    var checkMeta = function(args) {",
							"        pm.test(args.name + ' contains ' + args.value, function() {",
							"           var meta = body[obj].metadata.find( x => x.name === args.name);",
							"           pm.expect(meta.value).to.include(args.value);",
							"        });",
							"    };",
							"",
							"    // check page link",
							"    var checkPageLink = function(args) {",
							"        pm.test('Valid ' + args.name + ' page link', function() {",
							"            var link = body[obj].links.find(x => x.name === args.name);",
							"            var coll = args.has||[];",
							"            coll.forEach(function(p) {",
							"                pm.expect(link).to.have.property(p);",
							"            });",
							"        });",
							"    };",
							"",
							"    // check item",
							"    var checkItem = function(args) {",
							"        pm.test('Valid items', function() {",
							"            var coll = body[obj].items;",
							"            coll.forEach(function(item) {",
							"                var props = args.has||[];",
							"                props.forEach(function(p) {",
							"                   pm.expect(item).to.have.property(p); ",
							"                });",
							"            });",
							"        });",
							"    }",
							"",
							"    // check item link",
							"    var checkItemLink = function(args) {",
							"        pm.test('Valid ' + args.name + ' item link', function() {",
							"            coll = body[obj].items;",
							"            coll.forEach(function(item) {",
							"                var link = item.links.find(x => x.name === args.name);",
							"                var props = args.has||[];",
							"                props.forEach(function(p) {",
							"                    pm.expect(link).to.have.property(p);",
							"                });",
							"            });",
							"        });",
							"    };",
							"    ",
							"    return {",
							"        checkStatus,",
							"        checkHeader,",
							"        checkMeta,",
							"        checkPageLink,",
							"        checkItem,",
							"        checkItemLink",
							"    };",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0bf85a62-3593-4514-bab9-ca0015971f4e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/forms+json"
					}
				],
				"url": {
					"raw": "{{server}}/list/",
					"host": [
						"{{server}}"
					],
					"path": [
						"list",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Company Remove",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa707d9f-93f6-437a-8715-45e6dec84ea3",
						"exec": [
							"/***********************",
							" * FORMS+JSON TESTS",
							" ***********************/",
							"",
							"// shared vars for this script ",
							"var body = pm.response.json();",
							"var utils = shared({object:'company'});",
							"",
							"// 200 OK",
							"utils.checkStatus(200);",
							"",
							"// HEADERS",
							"utils.checkHeader({name:'content-type',value:'application/forms+json'});",
							"",
							"// METADATA",
							"utils.checkMeta({name:'title', value:'BigCo Company Records'});",
							"utils.checkMeta({name:'release', value:'1.0.0'});",
							"utils.checkMeta({name:'author', value:'Amundsen'});",
							"",
							"// LINKS",
							"utils.checkPageLink({name:'home', has:['id','href','rel']});",
							"utils.checkPageLink({name:'self', has:['id','href','rel']});",
							"utils.checkPageLink({name:'list', has:['id','href','rel']});",
							"utils.checkPageLink({name:'filter', has:['id','href','rel']});",
							"",
							"// ITEMS",
							"utils.checkItem({has:['id','companyName','status','email','dateCreated','dateUpdated','links']});",
							"utils.checkItemLink({name:'read', has:['id','href','rel']});",
							"utils.checkItemLink({name:'update', has:['id','href','rel','method','properties']});",
							"utils.checkItemLink({name:'status', has:['id','href','rel','method','properties']});",
							"utils.checkItemLink({name:'remove', has:['id','href','rel','method','properties']});",
							"",
							"// SHARED FUNCTIONS",
							"function shared (args) {",
							"",
							"    var obj = args.object||'';",
							"    ",
							"    // check status",
							"    var checkStatus = function(value) {",
							"        pm.test('Status is ' + value, function() {",
							"           pm.expect(pm.response.code).to.equal(value); ",
							"        });",
							"    };",
							"",
							"    // check header",
							"    var checkHeader = function(args) {",
							"        pm.test('Header ' + args.name + ' contains ' + args.value, function() {",
							"            var hdr = pm.response.headers.get(args.name);",
							"            pm.expect(hdr).to.include(args.value);",
							"        });",
							"    };",
							"",
							"    // check metadata",
							"    var checkMeta = function(args) {",
							"        pm.test(args.name + ' contains ' + args.value, function() {",
							"           var meta = body[obj].metadata.find( x => x.name === args.name);",
							"           pm.expect(meta.value).to.include(args.value);",
							"        });",
							"    };",
							"",
							"    // check page link",
							"    var checkPageLink = function(args) {",
							"        pm.test('Valid ' + args.name + ' page link', function() {",
							"            var link = body[obj].links.find(x => x.name === args.name);",
							"            var coll = args.has||[];",
							"            coll.forEach(function(p) {",
							"                pm.expect(link).to.have.property(p);",
							"            });",
							"        });",
							"    };",
							"",
							"    // check item",
							"    var checkItem = function(args) {",
							"        pm.test('Valid items', function() {",
							"            var coll = body[obj].items;",
							"            coll.forEach(function(item) {",
							"                var props = args.has||[];",
							"                props.forEach(function(p) {",
							"                   pm.expect(item).to.have.property(p); ",
							"                });",
							"            });",
							"        });",
							"    }",
							"",
							"    // check item link",
							"    var checkItemLink = function(args) {",
							"        pm.test('Valid ' + args.name + ' item link', function() {",
							"            coll = body[obj].items;",
							"            coll.forEach(function(item) {",
							"                var link = item.links.find(x => x.name === args.name);",
							"                var props = args.has||[];",
							"                props.forEach(function(p) {",
							"                    pm.expect(link).to.have.property(p);",
							"                });",
							"            });",
							"        });",
							"    };",
							"    ",
							"    return {",
							"        checkStatus,",
							"        checkHeader,",
							"        checkMeta,",
							"        checkPageLink,",
							"        checkItem,",
							"        checkItemLink",
							"    };",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0bf85a62-3593-4514-bab9-ca0015971f4e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/forms+json"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{server}}/q1w2e3r4",
					"host": [
						"{{server}}"
					],
					"path": [
						"q1w2e3r4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Company Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa707d9f-93f6-437a-8715-45e6dec84ea3",
						"exec": [
							"/***********************",
							" * FORMS+JSON TESTS",
							" ***********************/",
							"",
							"// shared vars for this script ",
							"var body = pm.response.json();",
							"var utils = shared({object:'company'});",
							"",
							"// 200 OK",
							"utils.checkStatus(200);",
							"",
							"// HEADERS",
							"utils.checkHeader({name:'content-type',value:'application/forms+json'});",
							"",
							"// METADATA",
							"utils.checkMeta({name:'title', value:'BigCo Company Records'});",
							"utils.checkMeta({name:'release', value:'1.0.0'});",
							"utils.checkMeta({name:'author', value:'Amundsen'});",
							"",
							"// LINKS",
							"utils.checkPageLink({name:'home', has:['id','href','rel']});",
							"utils.checkPageLink({name:'self', has:['id','href','rel']});",
							"utils.checkPageLink({name:'list', has:['id','href','rel']});",
							"utils.checkPageLink({name:'filter', has:['id','href','rel']});",
							"utils.checkPageLink({name:'create', has:['id','href','rel','method','properties']});",
							"",
							"// ITEMS",
							"utils.checkItem({has:['id','companyName','status','email','dateCreated','dateUpdated','links']});",
							"utils.checkItemLink({name:'read', has:['id','href','rel']});",
							"utils.checkItemLink({name:'update', has:['id','href','rel','method','properties']});",
							"utils.checkItemLink({name:'status', has:['id','href','rel','method','properties']});",
							"utils.checkItemLink({name:'remove', has:['id','href','rel','method','properties']});",
							"",
							"// SHARED FUNCTIONS",
							"function shared (args) {",
							"",
							"    var obj = args.object||'';",
							"    ",
							"    // check status",
							"    var checkStatus = function(value) {",
							"        pm.test('Status is ' + value, function() {",
							"           pm.expect(pm.response.code).to.equal(value); ",
							"        });",
							"    };",
							"",
							"    // check header",
							"    var checkHeader = function(args) {",
							"        pm.test('Header ' + args.name + ' contains ' + args.value, function() {",
							"            var hdr = pm.response.headers.get(args.name);",
							"            pm.expect(hdr).to.include(args.value);",
							"        });",
							"    };",
							"",
							"    // check metadata",
							"    var checkMeta = function(args) {",
							"        pm.test(args.name + ' contains ' + args.value, function() {",
							"           var meta = body[obj].metadata.find( x => x.name === args.name);",
							"           pm.expect(meta.value).to.include(args.value);",
							"        });",
							"    };",
							"",
							"    // check page link",
							"    var checkPageLink = function(args) {",
							"        pm.test('Valid ' + args.name + ' page link', function() {",
							"            var link = body[obj].links.find(x => x.name === args.name);",
							"            var coll = args.has||[];",
							"            coll.forEach(function(p) {",
							"                pm.expect(link).to.have.property(p);",
							"            });",
							"        });",
							"    };",
							"",
							"    // check item",
							"    var checkItem = function(args) {",
							"        pm.test('Valid items', function() {",
							"            var coll = body[obj].items;",
							"            coll.forEach(function(item) {",
							"                var props = args.has||[];",
							"                props.forEach(function(p) {",
							"                   pm.expect(item).to.have.property(p); ",
							"                });",
							"            });",
							"        });",
							"    }",
							"",
							"    // check item link",
							"    var checkItemLink = function(args) {",
							"        pm.test('Valid ' + args.name + ' item link', function() {",
							"            coll = body[obj].items;",
							"            coll.forEach(function(item) {",
							"                var link = item.links.find(x => x.name === args.name);",
							"                var props = args.has||[];",
							"                props.forEach(function(p) {",
							"                    pm.expect(link).to.have.property(p);",
							"                });",
							"            });",
							"        });",
							"    };",
							"    ",
							"    return {",
							"        checkStatus,",
							"        checkHeader,",
							"        checkMeta,",
							"        checkPageLink,",
							"        checkItem,",
							"        checkItemLink",
							"    };",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0bf85a62-3593-4514-bab9-ca0015971f4e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/forms+json"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "id",
							"value": "q1w2e3r4",
							"type": "text"
						},
						{
							"key": "companyName",
							"value": "{{$randomCompanyName}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{$randomEmail}}",
							"type": "text"
						},
						{
							"key": "telephone",
							"value": "{{$randomPhoneNumber}}",
							"type": "text"
						},
						{
							"key": "status",
							"value": "pending",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/",
					"host": [
						"{{server}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Company Read",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa707d9f-93f6-437a-8715-45e6dec84ea3",
						"exec": [
							"/***********************",
							" * FORMS+JSON TESTS",
							" ***********************/",
							"",
							"// shared vars for this script ",
							"var body = pm.response.json();",
							"var utils = shared({object:'company'});",
							"",
							"// 200 OK",
							"utils.checkStatus(200);",
							"",
							"// HEADERS",
							"utils.checkHeader({name:'content-type',value:'application/forms+json'});",
							"",
							"// METADATA",
							"utils.checkMeta({name:'title', value:'BigCo Company Records'});",
							"utils.checkMeta({name:'release', value:'1.0.0'});",
							"utils.checkMeta({name:'author', value:'Amundsen'});",
							"",
							"// LINKS",
							"utils.checkPageLink({name:'home', has:['id','href','rel']});",
							"utils.checkPageLink({name:'self', has:['id','href','rel']});",
							"utils.checkPageLink({name:'list', has:['id','href','rel']});",
							"utils.checkPageLink({name:'filter', has:['id','href','rel']});",
							"",
							"// ITEMS",
							"utils.checkItem({has:['id','companyName','status','email','dateCreated','dateUpdated','links']});",
							"utils.checkItemLink({name:'read', has:['id','href','rel']});",
							"utils.checkItemLink({name:'update', has:['id','href','rel','method','properties']});",
							"utils.checkItemLink({name:'status', has:['id','href','rel','method','properties']});",
							"utils.checkItemLink({name:'remove', has:['id','href','rel','method','properties']});",
							"",
							"// SHARED FUNCTIONS",
							"function shared (args) {",
							"",
							"    var obj = args.object||'';",
							"    ",
							"    // check status",
							"    var checkStatus = function(value) {",
							"        pm.test('Status is ' + value, function() {",
							"           pm.expect(pm.response.code).to.equal(value); ",
							"        });",
							"    };",
							"",
							"    // check header",
							"    var checkHeader = function(args) {",
							"        pm.test('Header ' + args.name + ' contains ' + args.value, function() {",
							"            var hdr = pm.response.headers.get(args.name);",
							"            pm.expect(hdr).to.include(args.value);",
							"        });",
							"    };",
							"",
							"    // check metadata",
							"    var checkMeta = function(args) {",
							"        pm.test(args.name + ' contains ' + args.value, function() {",
							"           var meta = body[obj].metadata.find( x => x.name === args.name);",
							"           pm.expect(meta.value).to.include(args.value);",
							"        });",
							"    };",
							"",
							"    // check page link",
							"    var checkPageLink = function(args) {",
							"        pm.test('Valid ' + args.name + ' page link', function() {",
							"            var link = body[obj].links.find(x => x.name === args.name);",
							"            var coll = args.has||[];",
							"            coll.forEach(function(p) {",
							"                pm.expect(link).to.have.property(p);",
							"            });",
							"        });",
							"    };",
							"",
							"    // check item",
							"    var checkItem = function(args) {",
							"        pm.test('Valid items', function() {",
							"            var coll = body[obj].items;",
							"            coll.forEach(function(item) {",
							"                var props = args.has||[];",
							"                props.forEach(function(p) {",
							"                   pm.expect(item).to.have.property(p); ",
							"                });",
							"            });",
							"        });",
							"    }",
							"",
							"    // check item link",
							"    var checkItemLink = function(args) {",
							"        pm.test('Valid ' + args.name + ' item link', function() {",
							"            coll = body[obj].items;",
							"            coll.forEach(function(item) {",
							"                var link = item.links.find(x => x.name === args.name);",
							"                var props = args.has||[];",
							"                props.forEach(function(p) {",
							"                    pm.expect(link).to.have.property(p);",
							"                });",
							"            });",
							"        });",
							"    };",
							"    ",
							"    return {",
							"        checkStatus,",
							"        checkHeader,",
							"        checkMeta,",
							"        checkPageLink,",
							"        checkItem,",
							"        checkItemLink",
							"    };",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0bf85a62-3593-4514-bab9-ca0015971f4e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/forms+json"
					}
				],
				"url": {
					"raw": "{{server}}/q1w2e3r4",
					"host": [
						"{{server}}"
					],
					"path": [
						"q1w2e3r4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Company Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa707d9f-93f6-437a-8715-45e6dec84ea3",
						"exec": [
							"/***********************",
							" * FORMS+JSON TESTS",
							" ***********************/",
							"",
							"// shared vars for this script ",
							"var body = pm.response.json();",
							"var utils = shared({object:'company'});",
							"",
							"// 200 OK",
							"utils.checkStatus(200);",
							"",
							"// HEADERS",
							"utils.checkHeader({name:'content-type',value:'application/forms+json'});",
							"",
							"// METADATA",
							"utils.checkMeta({name:'title', value:'BigCo Company Records'});",
							"utils.checkMeta({name:'release', value:'1.0.0'});",
							"utils.checkMeta({name:'author', value:'Amundsen'});",
							"",
							"// LINKS",
							"utils.checkPageLink({name:'home', has:['id','href','rel']});",
							"utils.checkPageLink({name:'self', has:['id','href','rel']});",
							"utils.checkPageLink({name:'list', has:['id','href','rel']});",
							"utils.checkPageLink({name:'filter', has:['id','href','rel']});",
							"",
							"// ITEMS",
							"utils.checkItem({has:['id','companyName','status','email','dateCreated','dateUpdated','links']});",
							"utils.checkItemLink({name:'read', has:['id','href','rel']});",
							"utils.checkItemLink({name:'update', has:['id','href','rel','method','properties']});",
							"utils.checkItemLink({name:'status', has:['id','href','rel','method','properties']});",
							"utils.checkItemLink({name:'remove', has:['id','href','rel','method','properties']});",
							"",
							"// SHARED FUNCTIONS",
							"function shared (args) {",
							"",
							"    var obj = args.object||'';",
							"    ",
							"    // check status",
							"    var checkStatus = function(value) {",
							"        pm.test('Status is ' + value, function() {",
							"           pm.expect(pm.response.code).to.equal(value); ",
							"        });",
							"    };",
							"",
							"    // check header",
							"    var checkHeader = function(args) {",
							"        pm.test('Header ' + args.name + ' contains ' + args.value, function() {",
							"            var hdr = pm.response.headers.get(args.name);",
							"            pm.expect(hdr).to.include(args.value);",
							"        });",
							"    };",
							"",
							"    // check metadata",
							"    var checkMeta = function(args) {",
							"        pm.test(args.name + ' contains ' + args.value, function() {",
							"           var meta = body[obj].metadata.find( x => x.name === args.name);",
							"           pm.expect(meta.value).to.include(args.value);",
							"        });",
							"    };",
							"",
							"    // check page link",
							"    var checkPageLink = function(args) {",
							"        pm.test('Valid ' + args.name + ' page link', function() {",
							"            var link = body[obj].links.find(x => x.name === args.name);",
							"            var coll = args.has||[];",
							"            coll.forEach(function(p) {",
							"                pm.expect(link).to.have.property(p);",
							"            });",
							"        });",
							"    };",
							"",
							"    // check item",
							"    var checkItem = function(args) {",
							"        pm.test('Valid items', function() {",
							"            var coll = body[obj].items;",
							"            coll.forEach(function(item) {",
							"                var props = args.has||[];",
							"                props.forEach(function(p) {",
							"                   pm.expect(item).to.have.property(p); ",
							"                });",
							"            });",
							"        });",
							"    }",
							"",
							"    // check item link",
							"    var checkItemLink = function(args) {",
							"        pm.test('Valid ' + args.name + ' item link', function() {",
							"            coll = body[obj].items;",
							"            coll.forEach(function(item) {",
							"                var link = item.links.find(x => x.name === args.name);",
							"                var props = args.has||[];",
							"                props.forEach(function(p) {",
							"                    pm.expect(link).to.have.property(p);",
							"                });",
							"            });",
							"        });",
							"    };",
							"    ",
							"    return {",
							"        checkStatus,",
							"        checkHeader,",
							"        checkMeta,",
							"        checkPageLink,",
							"        checkItem,",
							"        checkItemLink",
							"    };",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0bf85a62-3593-4514-bab9-ca0015971f4e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/forms+json"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "streetAddress",
							"value": "{{$randomStreetAddress}}",
							"type": "text"
						},
						{
							"key": "city",
							"value": "{{$randomCity}}",
							"type": "text"
						},
						{
							"key": "stateProvince",
							"value": "{{$randomAbbreviation}}",
							"type": "text"
						},
						{
							"key": "country",
							"value": "{{$randomCountryCode}}",
							"type": "text"
						},
						{
							"key": "postalCode",
							"value": "12345-67890",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/q1w2e3r4",
					"host": [
						"{{server}}"
					],
					"path": [
						"q1w2e3r4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Company Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa707d9f-93f6-437a-8715-45e6dec84ea3",
						"exec": [
							"/***********************",
							" * FORMS+JSON TESTS",
							" ***********************/",
							"",
							"// shared vars for this script ",
							"var body = pm.response.json();",
							"var utils = shared({object:'company'});",
							"",
							"// 200 OK",
							"utils.checkStatus(200);",
							"",
							"// HEADERS",
							"utils.checkHeader({name:'content-type',value:'application/forms+json'});",
							"",
							"// METADATA",
							"utils.checkMeta({name:'title', value:'BigCo Company Records'});",
							"utils.checkMeta({name:'release', value:'1.0.0'});",
							"utils.checkMeta({name:'author', value:'Amundsen'});",
							"",
							"// LINKS",
							"utils.checkPageLink({name:'home', has:['id','href','rel']});",
							"utils.checkPageLink({name:'self', has:['id','href','rel']});",
							"utils.checkPageLink({name:'list', has:['id','href','rel']});",
							"utils.checkPageLink({name:'filter', has:['id','href','rel']});",
							"",
							"// ITEMS",
							"utils.checkItem({has:['id','companyName','status','email','dateCreated','dateUpdated','links']});",
							"utils.checkItemLink({name:'read', has:['id','href','rel']});",
							"utils.checkItemLink({name:'update', has:['id','href','rel','method','properties']});",
							"utils.checkItemLink({name:'status', has:['id','href','rel','method','properties']});",
							"utils.checkItemLink({name:'remove', has:['id','href','rel','method','properties']});",
							"",
							"// SHARED FUNCTIONS",
							"function shared (args) {",
							"",
							"    var obj = args.object||'';",
							"    ",
							"    // check status",
							"    var checkStatus = function(value) {",
							"        pm.test('Status is ' + value, function() {",
							"           pm.expect(pm.response.code).to.equal(value); ",
							"        });",
							"    };",
							"",
							"    // check header",
							"    var checkHeader = function(args) {",
							"        pm.test('Header ' + args.name + ' contains ' + args.value, function() {",
							"            var hdr = pm.response.headers.get(args.name);",
							"            pm.expect(hdr).to.include(args.value);",
							"        });",
							"    };",
							"",
							"    // check metadata",
							"    var checkMeta = function(args) {",
							"        pm.test(args.name + ' contains ' + args.value, function() {",
							"           var meta = body[obj].metadata.find( x => x.name === args.name);",
							"           pm.expect(meta.value).to.include(args.value);",
							"        });",
							"    };",
							"",
							"    // check page link",
							"    var checkPageLink = function(args) {",
							"        pm.test('Valid ' + args.name + ' page link', function() {",
							"            var link = body[obj].links.find(x => x.name === args.name);",
							"            var coll = args.has||[];",
							"            coll.forEach(function(p) {",
							"                pm.expect(link).to.have.property(p);",
							"            });",
							"        });",
							"    };",
							"",
							"    // check item",
							"    var checkItem = function(args) {",
							"        pm.test('Valid items', function() {",
							"            var coll = body[obj].items;",
							"            coll.forEach(function(item) {",
							"                var props = args.has||[];",
							"                props.forEach(function(p) {",
							"                   pm.expect(item).to.have.property(p); ",
							"                });",
							"            });",
							"        });",
							"    }",
							"",
							"    // check item link",
							"    var checkItemLink = function(args) {",
							"        pm.test('Valid ' + args.name + ' item link', function() {",
							"            coll = body[obj].items;",
							"            coll.forEach(function(item) {",
							"                var link = item.links.find(x => x.name === args.name);",
							"                var props = args.has||[];",
							"                props.forEach(function(p) {",
							"                    pm.expect(link).to.have.property(p);",
							"                });",
							"            });",
							"        });",
							"    };",
							"    ",
							"    return {",
							"        checkStatus,",
							"        checkHeader,",
							"        checkMeta,",
							"        checkPageLink,",
							"        checkItem,",
							"        checkItemLink",
							"    };",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0bf85a62-3593-4514-bab9-ca0015971f4e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/forms+json"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "status",
							"value": "active",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/status/q1w2e3r4",
					"host": [
						"{{server}}"
					],
					"path": [
						"status",
						"q1w2e3r4"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}